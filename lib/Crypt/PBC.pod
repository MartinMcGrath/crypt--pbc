=head1 NAME

Crypt::PBC - OO interface for Lynn's PBC library @ Standford

=head1 SYNOPSIS

    use Crypt::PBC;

    my $pairing = new Crypt::PBC("params.txt");
    my $G1      = $pairing->init_G1->random;
    my $G2      = $pairing->init_G2->random->double->square;
    my $GT      = $pairing->init_GT->apply_pairing( $pairing => $G1, $G2 );

=head1 Nomenclature

The documentation (and error messages) for these modules frequently refer
to the LHS, the RHS, EXPO, and BASE.  They are the left hand side, right
hand side, exponent and base.  In an algebraic equation: LHS=RHS and
LHS=BASE^EXPO.  In other words, the LHS is the element to which a value is
being assigned.  There may sometimes be more than one RHS, or it might be
called the a1 or n1; but, there will only be one LHS.

=head1 PM Methods

The PM methods implement an OO interface that the author highly recommends
using.

=head2 new()

Returns a new PBC pairing object.  new() takes, as arguments, either the
name of a file, a file stream (e.g., new Crypt::PBC(\*STDIN)), or the
params for a curve as a string.  Ben Lynn provides a zip file of d-type
curves:

    MNT curve parameters for embedding degree 6 (which I call type D
    curves), for all D less than a million, and for subgroup sizes at least
    80 bits and less than 300 bits long. Generated using test programs
    bundled with PBC library.

http://crypto.stanford.edu/pbc/download.html

=head1 XS Loaded Functions

This section is basically a listing of the PBC functions as they are
imported.  You can use them directly if you're already comfortable with the
layout of PBC.  If you're starting from scratch and aren't much of a C
coder, you'll have an easier time using the PM methods because they
implement a little type-safety to protect perl coders from segfaults.

Mixing and matching direct calls with the PM methods is a sure way to run
into trouble, since the PM methods tag the PBC elements with a type...

=head2 Initializer functions

=head2 Exponentiation Functions

=head2 Other Arithmetic Functions

=head2 Comparison Functions

=head2 Misc

=head1 XS AUTHOR

Paul Miller <japh@voltar-confed.org>

Paul is using this software in his own projects...  If you find bugs, please
please please let him know. :) Actually, let him know if you find it handy at
all.  Half the fun of releasing this stuff is knowing that people use it.

Additionally, he is aware that the documentation sucks.  Should you email him
for help, he will most likely try to give it.

=head1 COPYRIGHT

GPL! (and/or whatever license the gnu regex engine is under)

Though, additionally, I will say that I'll be tickled if you were to include
this package in any commercial endeavor.  Also, any thoughts to the effect that
using this module will somehow make your commercial package GPL should be washed
away.

I hereby release you from any such silly conditions -- if possible while still
matching the license from gnu regex.

This package and any modifications you make to it must remain GPL.  Any programs
you (or your company) write shall remain yours (and under whatever copyright you
choose) even if you use this package's intended and/or exported interfaces in
them.

(again, if possible)

Lastly, having said all the above, there may be certain restrictions from
the PBC library itself that I cannot amend or take away!

=head1 SEE ALSO

http://crypto.stanford.edu/pbc/

http://groups.google.com/group/pbc-devel

perl(1)
